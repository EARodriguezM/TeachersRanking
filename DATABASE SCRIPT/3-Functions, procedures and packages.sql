
--Common_User table

CREATE OR REPLACE PACKAGE PACK_COMMON_USER AS
    --Declare default information for update user
    COMMON_USER_ROW COMMON_USER%ROWTYPE;
    
    FUNCTION CHECK_ID_BY_EMAIL (EMAIL_PARAMETER IN COMMON_USER.EMAIL%TYPE) RETURN NUMBER;
    PROCEDURE ADD_COMMON_USER(EMAIL_PARAMETER COMMON_USER.EMAIL%TYPE);
    PROCEDURE REGISTER_COMMON_USER(FIRST_NAME_PARAMETER COMMON_USER.FIRST_NAME%TYPE,
        SECOND_NAME_PARAMETER COMMON_USER.SECOND_NAME%TYPE, 
        FIRST_SURNAME_PARAMETER COMMON_USER.FIRST_SURNAME%TYPE,
        SECOND_SURNAME_PARAMETER COMMON_USER.SECOND_SURNAME%TYPE, 
        EMAIL_PARAMETER COMMON_USER.EMAIL%TYPE,
        PASSWORD_PARAMETER COMMON_USER.PASSWORD%TYPE,
        SALT_PARAMETER COMMON_USER.SALT%TYPE,
        USER_TYPE_PARAMETER COMMON_USER.USER_TYPE%TYPE DEFAULT '1');
    PROCEDURE PASSWORD_RECUPERATION(EMAIL_PARAMETER COMMON_USER.EMAIL%TYPE,
        PASSWORD_OUT_PARAMETER OUT COMMON_USER.PASSWORD%TYPE,
        SALT_OUT_PARAMETER OUT COMMON_USER.PASSWORD%TYPE);
    PROCEDURE OBTAIN_DATABASE_INFORMATION(EMAIL_OLD_PARAMETER COMMON_USER.EMAIL%TYPE);
    PROCEDURE UPDATE_USER_INFORMARTION(FIRST_NAME_PARAMETER COMMON_USER.FIRST_NAME%TYPE DEFAULT COMMON_USER_ROW.FIRST_NAME,
        SECOND_NAME_PARAMETER COMMON_USER.SECOND_NAME%TYPE DEFAULT COMMON_USER_ROW.SECOND_NAME, 
        FIRST_SURNAME_PARAMETER COMMON_USER.FIRST_SURNAME%TYPE DEFAULT COMMON_USER_ROW.FIRST_SURNAME,
        SECOND_SURNAME_PARAMETER COMMON_USER.SECOND_SURNAME%TYPE DEFAULT COMMON_USER_ROW.SECOND_SURNAME,
        EMAIL_NEW_PARAMETER COMMON_USER.EMAIL%TYPE DEFAULT COMMON_USER_ROW.EMAIL,
        PASSWORD_PARAMETER COMMON_USER.PASSWORD%TYPE DEFAULT COMMON_USER_ROW.PASSWORD,
        SALT_PARAMETER COMMON_USER.SALT%TYPE DEFAULT COMMON_USER_ROW.SALT,
        USER_TYPE_PARAMETER COMMON_USER.USER_TYPE%TYPE DEFAULT COMMON_USER_ROW.USER_TYPE);
        FUNCTION CHECK_USER_IS_REGISTERED (EMAIL_PARAMETER COMMON_USER.EMAIL%TYPE) RETURN NUMBER;
END PACK_COMMON_USER;

CREATE OR REPLACE PACKAGE BODY PACK_COMMON_USER AS
    --Check id from common user using Email 
    FUNCTION CHECK_ID_BY_EMAIL (EMAIL_PARAMETER COMMON_USER.EMAIL%TYPE)
    RETURN NUMBER IS 
        ID_RETURN COMMON_USER.COMMON_USER_ID%TYPE := NULL;
    BEGIN
        SELECT COMMON_USER_ID INTO ID_RETURN
        FROM COMMON_USER
        WHERE EMAIL = UPPER(EMAIL_PARAMETER);
        RETURN ID_RETURN;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            ID_RETURN := NULL;
        RETURN ID_RETURN;
    END CHECK_ID_BY_EMAIL;
    --Add user without register   
    PROCEDURE ADD_COMMON_USER(EMAIL_PARAMETER COMMON_USER.EMAIL%TYPE)
    IS
    BEGIN
        INSERT INTO COMMON_USER(EMAIL, USER_TYPE) VALUES (UPPER(EMAIL_PARAMETER),'1');    
    END ADD_COMMON_USER;
    --Register user in the system
    PROCEDURE REGISTER_COMMON_USER(FIRST_NAME_PARAMETER COMMON_USER.FIRST_NAME%TYPE,
        SECOND_NAME_PARAMETER COMMON_USER.SECOND_NAME%TYPE, 
        FIRST_SURNAME_PARAMETER COMMON_USER.FIRST_SURNAME%TYPE,
        SECOND_SURNAME_PARAMETER COMMON_USER.SECOND_SURNAME%TYPE, 
        EMAIL_PARAMETER COMMON_USER.EMAIL%TYPE,
        PASSWORD_PARAMETER COMMON_USER.PASSWORD%TYPE,
        SALT_PARAMETER COMMON_USER.SALT%TYPE,
        USER_TYPE_PARAMETER COMMON_USER.USER_TYPE%TYPE DEFAULT '1')
    IS
        ID_FINDED COMMON_USER.COMMON_USER_ID%TYPE;
    BEGIN
         ID_FINDED := PACK_COMMON_USER.CHECK_ID_BY_EMAIL(UPPER(EMAIL_PARAMETER));
        BEGIN
            IF ID_FINDED != NULL THEN
                UPDATE COMMON_USER
                SET FIRST_NAME = FIRST_NAME_PARAMETER, SECOND_NAME = SECOND_NAME_PARAMETER, FIRST_SURNAME = FIRST_SURNAME_PARAMETER, SECOND_SURNAME = SECOND_SURNAME_PARAMETER,PASSWORD = PASSWORD_PARAMETER, SALT = SALT_PARAMETER, IS_REGISTERED = '1'
                WHERE COMMON_USER_ID = ID_FINDED;
            ELSE
                INSERT INTO COMMON_USER(FIRST_NAME, SECOND_NAME , FIRST_SURNAME, SECOND_SURNAME, EMAIL, PASSWORD, SALT, IS_REGISTERED, USER_TYPE)
                VALUES (FIRST_NAME_PARAMETER, SECOND_NAME_PARAMETER, FIRST_SURNAME_PARAMETER, SECOND_SURNAME_PARAMETER, UPPER(EMAIL_PARAMETER), PASSWORD_PARAMETER, SALT_PARAMETER, 1, USER_TYPE_PARAMETER); --Deveria ir un disparador en el IS_REGISTERED
            END IF;
        END;
    END REGISTER_COMMON_USER;
    --Password recuperation
    PROCEDURE PASSWORD_RECUPERATION(EMAIL_PARAMETER COMMON_USER.EMAIL%TYPE,
        PASSWORD_OUT_PARAMETER OUT COMMON_USER.PASSWORD%TYPE,
        SALT_OUT_PARAMETER OUT COMMON_USER.PASSWORD%TYPE)
    IS
    BEGIN
        SELECT PASSWORD,SALT INTO PASSWORD_OUT_PARAMETER, SALT_OUT_PARAMETER
        FROM COMMON_USER
        WHERE EMAIL = UPPER(EMAIL_PARAMETER);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            PASSWORD_OUT_PARAMETER := NULL;
            SALT_OUT_PARAMETER := NULL;
    END PASSWORD_RECUPERATION;  
    --Update data from common user    
    PROCEDURE OBTAIN_DATABASE_INFORMATION(EMAIL_OLD_PARAMETER COMMON_USER.EMAIL%TYPE)
    IS
        ID_FINDED COMMON_USER.COMMON_USER_ID%TYPE;    
    BEGIN
         ID_FINDED := PACK_COMMON_USER.CHECK_ID_BY_EMAIL(UPPER(EMAIL_OLD_PARAMETER));
         SELECT * INTO COMMON_USER_ROW
         FROM COMMON_USER
         WHERE COMMON_USER_ID = ID_FINDED;
    END OBTAIN_DATABASE_INFORMATION;
    PROCEDURE UPDATE_USER_INFORMARTION(FIRST_NAME_PARAMETER COMMON_USER.FIRST_NAME%TYPE DEFAULT COMMON_USER_ROW.FIRST_NAME,
        SECOND_NAME_PARAMETER COMMON_USER.SECOND_NAME%TYPE DEFAULT COMMON_USER_ROW.SECOND_NAME, 
        FIRST_SURNAME_PARAMETER COMMON_USER.FIRST_SURNAME%TYPE DEFAULT COMMON_USER_ROW.FIRST_SURNAME,
        SECOND_SURNAME_PARAMETER COMMON_USER.SECOND_SURNAME%TYPE DEFAULT COMMON_USER_ROW.SECOND_SURNAME,
        EMAIL_NEW_PARAMETER COMMON_USER.EMAIL%TYPE DEFAULT COMMON_USER_ROW.EMAIL,
        PASSWORD_PARAMETER COMMON_USER.PASSWORD%TYPE DEFAULT COMMON_USER_ROW.PASSWORD,
        SALT_PARAMETER COMMON_USER.SALT%TYPE DEFAULT COMMON_USER_ROW.SALT,
        USER_TYPE_PARAMETER COMMON_USER.USER_TYPE%TYPE DEFAULT COMMON_USER_ROW.USER_TYPE)
    IS
    BEGIN
        UPDATE COMMON_USER
        SET FIRST_NAME = FIRST_NAME_PARAMETER, SECOND_NAME = SECOND_NAME_PARAMETER, FIRST_SURNAME = FIRST_SURNAME_PARAMETER, SECOND_SURNAME = SECOND_SURNAME_PARAMETER,EMAIL = EMAIL_NEW_PARAMETER,PASSWORD = PASSWORD_PARAMETER, SALT = SALT_PARAMETER, USER_TYPE = USER_TYPE_PARAMETER
        WHERE COMMON_USER_ID = COMMON_USER_ROW.COMMON_USER_ID;
    END UPDATE_USER_INFORMARTION; 
    --Check if user as already register
    FUNCTION CHECK_USER_IS_REGISTERED (EMAIL_PARAMETER COMMON_USER.EMAIL%TYPE)
    RETURN NUMBER IS 
        ID_RETURN COMMON_USER.COMMON_USER_ID%TYPE := NULL;
    BEGIN
        SELECT COMMON_USER_ID INTO ID_RETURN
        FROM COMMON_USER
        WHERE EMAIL = UPPER(EMAIL_PARAMETER)AND IS_REGISTERED = 1;
        RETURN ID_RETURN;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            ID_RETURN := NULL;
        RETURN ID_RETURN;
    END CHECK_USER_IS_REGISTERED;
END PACK_COMMON_USER;

--Review table

CREATE OR REPLACE PACKAGE PACK_REVIEW AS
     PROCEDURE ADD_REVIEW(TEACHER_ID_PARAMETER TEACHER.TEACHER_ID%TYPE,
        COMMON_USER_ID_PARAMETER COMMON_USER.COMMON_USER_ID%TYPE,
        MATTER_ID_PARAMETER MATTER.MATTER_ID%TYPE,
        SEMESTER_ID_PARAMETER SEMESTER_LOG.SEMESTER_LOG_ID%TYPE,
        CONTENT_PARAMETER REVIEW.CONTENT%TYPE,
        KNOWLEDGE_PARAMETER REVIEW.KNOWLEDGE%TYPE,
        NATURALNESS_PARAMETER REVIEW.NATURALNESS%TYPE,
        ATTITUDE_PARAMETER REVIEW.ATTITUDE%TYPE,
        MOTIVATION_PRODUCE_PARAMETER REVIEW.MOTIVATION_PRODUCE%TYPE,
        MATTER_GUIDELINES_PARAMETER REVIEW.MATTER_GUIDELINES%TYPE,
        WEIGHTED_AVERAGE_PARAMETER REVIEW.WEIGHTED_AVERAGE%TYPE,
        IS_ANONYMOUS_PARAMETER REVIEW.IS_ANONYMOUS%TYPE,
        FAIL_ANY_MATTER_PARAMETER REVIEW.FAIL_ANY_MATTER%TYPE);
    PROCEDURE DEACTIVE_REVIEW (REVIEW_ID_PARAMETER REVIEW.REVIEW_ID%TYPE);
    PROCEDURE REACTIVE_REVIEW (REVIEW_ID_PARAMETER REVIEW.REVIEW_ID%TYPE);
    PROCEDURE REMOVE_REVIEW (REVIEW_ID_PARAMETER REVIEW.REVIEW_ID%TYPE);
    FUNCTION TOTAL_REVIEWS RETURN NUMBER;
    PROCEDURE GET_RECENT_REVIEW;
    PROCEDURE GET_REVIEW_BY_TEACHER(TEACHER_ID_PARAMETER REVIEW.TEACHER_ID%TYPE);
    PROCEDURE GET_REVIEW_BY_COMMON_USER(COMMON_USER_ID_PARAMETER REVIEW.COMMON_USER_ID%TYPE);
    PROCEDURE GET_REVIEW_BY_MATTER(MATTER_ID_PARAMETER REVIEW.MATTER_ID%TYPE);
END PACK_REVIEW;

CREATE OR REPLACE PACKAGE BODY PACK_REVIEW AS
    FUNCTION TOTAL_REVIEWS
    RETURN NUMBER IS
        total NUMBER(10) := 0;
    BEGIN 
        SELECT COUNT(REVIEW_ID) INTO total
        FROM REVIEW;

        RETURN total;
    END TOTAL_REVIEWS;
    --Add one review
    PROCEDURE ADD_REVIEW(TEACHER_ID_PARAMETER TEACHER.TEACHER_ID%TYPE,
        COMMON_USER_ID_PARAMETER COMMON_USER.COMMON_USER_ID%TYPE,
        MATTER_ID_PARAMETER MATTER.MATTER_ID%TYPE,
        SEMESTER_ID_PARAMETER SEMESTER_LOG.SEMESTER_LOG_ID%TYPE,
        CONTENT_PARAMETER REVIEW.CONTENT%TYPE,
        KNOWLEDGE_PARAMETER REVIEW.KNOWLEDGE%TYPE,
        NATURALNESS_PARAMETER REVIEW.NATURALNESS%TYPE,
        ATTITUDE_PARAMETER REVIEW.ATTITUDE%TYPE,
        MOTIVATION_PRODUCE_PARAMETER REVIEW.MOTIVATION_PRODUCE%TYPE,
        MATTER_GUIDELINES_PARAMETER REVIEW.MATTER_GUIDELINES%TYPE,
        WEIGHTED_AVERAGE_PARAMETER REVIEW.WEIGHTED_AVERAGE%TYPE,
        IS_ANONYMOUS_PARAMETER REVIEW.IS_ANONYMOUS%TYPE,
        FAIL_ANY_MATTER_PARAMETER REVIEW.FAIL_ANY_MATTER%TYPE)
    IS
    BEGIN
        INSERT INTO REVIEW(TEACHER_ID,COMMON_USER_ID, MATTER_ID, SEMESTER_ID, CONTENT, KNOWLEDGE, NATURALNESS, ATTITUDE, MOTIVATION_PRODUCE, MATTER_GUIDELINES, WEIGHTED_AVERAGE, IS_ANONYMOUS, FAIL_ANY_MATTER)
        VALUES(TEACHER_ID_PARAMETER, COMMON_USER_ID_PARAMETER, MATTER_ID_PARAMETER,SEMESTER_ID_PARAMETER, CONTENT_PARAMETER, KNOWLEDGE_PARAMETER, 
        NATURALNESS_PARAMETER, ATTITUDE_PARAMETER, MOTIVATION_PRODUCE_PARAMETER, MATTER_GUIDELINES_PARAMETER, WEIGHTED_AVERAGE_PARAMETER, IS_ANONYMOUS_PARAMETER, FAIL_ANY_MATTER_PARAMETER);
    END ADD_REVIEW;
    --Deactive a review
    PROCEDURE DEACTIVE_REVIEW (REVIEW_ID_PARAMETER REVIEW.REVIEW_ID%TYPE)
    IS
    BEGIN
        UPDATE REVIEW
        SET STATUS = '0'
        WHERE REVIEW_ID = REVIEW_ID_PARAMETER;
    END DEACTIVE_REVIEW;
    --Reactive this review
    PROCEDURE REACTIVE_REVIEW (REVIEW_ID_PARAMETER REVIEW.REVIEW_ID%TYPE)
    IS
    BEGIN
        UPDATE REVIEW
        SET STATUS = '1'
        WHERE REVIEW_ID = REVIEW_ID_PARAMETER;
    END REACTIVE_REVIEW;
    --remove the review
    PROCEDURE REMOVE_REVIEW(REVIEW_ID_PARAMETER REVIEW.REVIEW_ID%TYPE)
    IS
    BEGIN
        DELETE REVIEW
        WHERE REVIEW_ID = REVIEW_ID_PARAMETER;
    END REMOVE_REVIEW;
    --Get all review order by post_date
    PROCEDURE GET_RECENT_REVIEW
    AS
        CURSOR_REVIEW Sys_Refcursor;
    BEGIN
        OPEN CURSOR_REVIEW FOR
        SELECT * FROM REVIEW ORDER BY POST_DATE DESC;
        DBMS_SQL.RETURN_RESULT(CURSOR_REVIEW);
    END GET_RECENT_REVIEW;
    --Get reviews from a teacher
    PROCEDURE GET_REVIEW_BY_TEACHER(TEACHER_ID_PARAMETER REVIEW.TEACHER_ID%TYPE)
    AS
        CURSOR_REVIEW Sys_Refcursor;
    BEGIN
        OPEN CURSOR_REVIEW FOR
        SELECT * FROM REVIEW WHERE TEACHER_ID =TEACHER_ID_PARAMETER  ORDER BY POST_DATE DESC;
        DBMS_SQL.RETURN_RESULT(CURSOR_REVIEW);
    END GET_REVIEW_BY_TEACHER;
    --Get reviews from a common user
    PROCEDURE GET_REVIEW_BY_COMMON_USER(COMMON_USER_ID_PARAMETER REVIEW.COMMON_USER_ID%TYPE)
    AS
        CURSOR_REVIEW Sys_Refcursor;
    BEGIN
        OPEN CURSOR_REVIEW FOR
        SELECT * FROM REVIEW WHERE COMMON_USER_ID =COMMON_USER_ID_PARAMETER  ORDER BY POST_DATE DESC;
        DBMS_SQL.RETURN_RESULT(CURSOR_REVIEW);
    END GET_REVIEW_BY_COMMON_USER;
    --Get reviews from a matter
    PROCEDURE GET_REVIEW_BY_MATTER(MATTER_ID_PARAMETER REVIEW.MATTER_ID%TYPE)
    AS
        CURSOR_MATTER Sys_Refcursor;
    BEGIN
        OPEN CURSOR_MATTER FOR
        SELECT * FROM REVIEW WHERE MATTER_ID = MATTER_ID_PARAMETER  ORDER BY POST_DATE DESC;
        DBMS_SQL.RETURN_RESULT(CURSOR_MATTER);
    END GET_REVIEW_BY_MATTER;
    --Get reviews from a semester
    PROCEDURE GET_REVIEW_BY_SEMESTER(SEMESTER_ID_PARAMETER REVIEW.SEMESTER_ID%TYPE)
    AS
        CURSOR_SEMESTER Sys_Refcursor;
    BEGIN
        OPEN CURSOR_SEMESTER FOR
        SELECT * FROM REVIEW WHERE SEMESTER_ID = SEMESTER_ID_PARAMETER  ORDER BY POST_DATE DESC;
        DBMS_SQL.RETURN_RESULT(CURSOR_SEMESTER);
    END GET_REVIEW_BY_SEMESTER;
    
END PACK_REVIEW;
    
-- Teacher table

CREATE OR REPLACE PACKAGE PACK_TEACHER AS
    PROCEDURE GET_ACTIVE_TEACHERS_LIST;
    PROCEDURE GET_ALL_TEACHERS_LIST;
END PACK_TEACHER;

CREATE OR REPLACE PACKAGE BODY PACK_TEACHER AS
    PROCEDURE ADD_TEACHER(TEACHER_ID_PARAMETER TEACHER.TEACHER_ID%TYPE,
        FIRST_NAME_PARAMETER TEACHER.FIRST_NAME%TYPE,
        SECOND_NAME_PARAMETER TEACHER.SECOND_NAME%TYPE,
        FIRST_SURNAME_PARAMETER TEACHER.FIRST_SURNAME%TYPE,
        SECOND_SURNAME_PARAMETER TEACHER.SECOND_SURNAME%TYPE,
        IS_UPC_TEACHER_PARAMETER TEACHER.IS_UPC_TEACHER%TYPE)
    AS
    BEGIN
        INSERT INTO TEACHER(TEACHER_ID, FIRST_NAME, SECOND_NAME, FIRST_SURNAME, SECOND_SURNAME, IS_UPC_TEACHER)
        VALUES (TEACHER_ID_PARAMETER, FIRST_NAME_PARAMETER, SECOND_NAME_PARAMETER, FIRST_SURNAME_PARAMETER, SECOND_SURNAME_PARAMETER, IS_UPC_TEACHER_PARAMETER);
    END ADD_TEACHER;
        
    PROCEDURE GET_ACTIVE_TEACHERS_LIST
    AS
        CURSOR_TEACHER Sys_Refcursor;
    BEGIN
        OPEN CURSOR_TEACHER FOR
        SELECT * FROM TEACHER
        WHERE STATUS = 1;
        DBMS_SQL.RETURN_RESULT(CURSOR_TEACHER);
    END GET_ACTIVE_TEACHERS_LIST;
    
    PROCEDURE GET_ALL_TEACHERS_LIST
    AS
        CURSOR_TEACHER Sys_Refcursor;
    BEGIN
        OPEN CURSOR_TEACHER FOR
        SELECT * FROM TEACHER;
        DBMS_SQL.RETURN_RESULT(CURSOR_TEACHER);
    END GET_ALL_TEACHERS_LIST;
END PACK_TEACHER;

--Career table

CREATE OR REPLACE PACKAGE PACK_CAREER AS
    PROCEDURE GET_ACTIVE_CAREERS_LIST;
    PROCEDURE GET_ALL_CAREERS_LIST;
    PROCEDURE GET_CAREERS_BY_FACULTY(FACULTY_ID_PARAMETER CAREER.FACULTY_ID%TYPE);
END PACK_CAREER;

CREATE OR REPLACE PACKAGE BODY PACK_CAREER AS
    PROCEDURE GET_ACTIVE_CAREERS_LIST
    AS
        CURSOR_CAREER SYS_REFCURSOR;
    BEGIN
        OPEN CURSOR_CAREER FOR
        SELECT * FROM CAREER
        WHERE STATUS=1;
        DBMS_SQL.RETURN_RESULT(CURSOR_CAREER);
    END GET_ACTIVE_CAREERS_LIST;
    
    PROCEDURE GET_ALL_CAREERS_LIST
    AS
        CURSOR_CAREER SYS_REFCURSOR;
    BEGIN
        OPEN CURSOR_CAREER FOR
        SELECT * FROM CAREER;
        DBMS_SQL.RETURN_RESULT(CURSOR_CAREER);
    END GET_ALL_CAREERS_LIST;
    
    PROCEDURE GET_CAREERS_BY_FACULTY(FACULTY_ID_PARAMETER CAREER.FACULTY_ID%TYPE)
    AS
        CURSOR_CAREER SYS_REFCURSOR;
    BEGIN
        OPEN CURSOR_CAREER FOR
        SELECT * FROM CAREER
        WHERE FACULTY_ID = FACULTY_ID_PARAMETER;
        DBMS_SQL.RETURN_RESULT(CURSOR_CAREER);
    END GET_CAREERS_BY_FACULTY;
END PACK_CAREER;

--R_Career_Matter table

CREATE OR REPLACE PACKAGE PACK_R_CAREER_MATTER AS
    PROCEDURE GET_MATTER_BY_CAREER(CAREER_ID_PARAMETER R_CAREER_MATTER.CAREER_ID%TYPE);
    PROCEDURE GET_CAREER_BY_MATTER(MATTER_ID_PARAMETER R_CAREER_MATTER.MATTER_ID%TYPE);
END PACK_R_CAREER_MATTER;

CREATE OR REPLACE PACKAGE BODY PACK_R_CAREER_MATTER AS
    PROCEDURE GET_MATTER_BY_CAREER(CAREER_ID_PARAMETER R_CAREER_MATTER.CAREER_ID%TYPE)
    AS
        CURSOR_MATTER Sys_Refcursor;
    BEGIN
        OPEN CURSOR_MATTER FOR
        SELECT M.MATTER_ID,M.NAME,M.STATUS FROM MATTER M 
        INNER JOIN R_CAREER_MATTER RCM ON (M.MATTER_ID = RCM.MATTER_ID)
        WHERE RCM.CAREER_ID = CAREER_ID_PARAMETER AND RCM.STATUS = 1;
        DBMS_SQL.RETURN_RESULT(CURSOR_MATTER);
    END GET_MATTER_BY_CAREER;
    
    PROCEDURE GET_CAREER_BY_MATTER(MATTER_ID_PARAMETER R_CAREER_MATTER.MATTER_ID%TYPE)
    AS
        CURSOR_CAREER Sys_Refcursor;
    BEGIN
        OPEN CURSOR_CAREER FOR
        SELECT C.CAREER_ID, C.NAME, C.FACULTY_ID, C.STATUS FROM CAREER C 
        INNER JOIN R_CAREER_MATTER RCM ON (C.CAREER_ID = RCM.CAREER_ID)
        WHERE RCM.MATTER_ID = MATTER_ID_PARAMETER AND RCM.STATUS = 1;
        DBMS_SQL.RETURN_RESULT(CURSOR_CAREER);
    END GET_CAREER_BY_MATTER;
END PACK_R_CAREER_MATTER;

--Faculty table

CREATE OR REPLACE PACKAGE PACK_FACULTY AS
    PROCEDURE GET_ALL_FACULTIES_LIST;
    PROCEDURE GET_ACTIVE_FACULTIES_LIST;
END;

CREATE OR REPLACE PACKAGE BODY PACK_FACULTY AS
    PROCEDURE GET_ALL_FACULTIES_LIST
    AS
        CURSOR_FACULTY SYS_REFCURSOR;
    BEGIN
        OPEN CURSOR_FACULTY FOR
        SELECT * FROM FACULTY;
        DBMS_SQL.RETURN_RESULT(CURSOR_FACULTY);
    END GET_ALL_FACULTIES_LIST;
    
    PROCEDURE GET_ACTIVE_FACULTIES_LIST
    AS
        CURSOR_FACULTY SYS_REFCURSOR;
    BEGIN
        OPEN CURSOR_FACULTY FOR
        SELECT * FROM FACULTY
        WHERE STATUS = 1;
        DBMS_SQL.RETURN_RESULT(CURSOR_FACULTY);
    END GET_ACTIVE_FACULTIES_LIST;
END;

--Matter table

CREATE OR REPLACE PACKAGE PACK_MATTER AS
    PROCEDURE GET_ALL_MATTERS_LIST;
    PROCEDURE GET_ACTIVE_MATTERS_LIST;
END;

CREATE OR REPLACE PACKAGE BODY PACK_MATTER AS
    PROCEDURE GET_ALL_MATTERS_LIST
    AS
        CURSOR_MATTERS SYS_REFCURSOR;
    BEGIN
        OPEN CURSOR_MATTERS FOR
        SELECT * FROM FACULTY;
        DBMS_SQL.RETURN_RESULT(CURSOR_MATTERS);
    END GET_ALL_MATTERS_LIST;
    
    PROCEDURE GET_ACTIVE_MATTERS_LIST
    AS
        CURSOR_MATTERS SYS_REFCURSOR;
    BEGIN
        OPEN CURSOR_MATTERS FOR
        SELECT * FROM FACULTY
        WHERE STATUS = 1;
        DBMS_SQL.RETURN_RESULT(CURSOR_MATTERS);
    END GET_ACTIVE_MATTERS_LIST;
END;

--R_Teacher_Matter table

CREATE OR REPLACE PACKAGE PACK_R_TEACHER_MATTER AS
    PROCEDURE ADD_R_TEACHER_MATTER(MATTER_ID_PARAMETER R_TEACHER_MATTER.MATTER_ID%TYPE,
        TEACHER_ID_PARAMETER R_TEACHER_MATTER.TEACHER_ID%TYPE,
        SEMESTER_ID_PARAMETER R_TEACHER_MATTER.SEMESTER_ID%TYPE);
    PROCEDURE GET_TEACHERS_BY_MATTER(MATTER_ID_PARAMETER R_TEACHER_MATTER.MATTER_ID%TYPE);
    PROCEDURE GET_MATTERS_BY_TEACHER(TEACHER_ID_PARAMETER R_TEACHER_MATTER.TEACHER_ID%TYPE);
    PROCEDURE GET_TEACHERS_BY_MATTER_FILTER_BY_SEMESTER(MATTER_ID_PARAMETER R_TEACHER_MATTER.MATTER_ID%TYPE,
        SEMESTER_ID_PARAMETER R_TEACHER_MATTER.SEMESTER_ID%TYPE);
    PROCEDURE GET_MATTERS_BY_TEACHER_FILTER_BY_SEMESTER(TEACHER_ID_PARAMETER R_TEACHER_MATTER.TEACHER_ID%TYPE,
        SEMESTER_ID_PARAMETER R_TEACHER_MATTER.SEMESTER_ID%TYPE);
END PACK_R_TEACHER_MATTER;

CREATE OR REPLACE PACKAGE BODY PACK_R_TEACHER_MATTER AS

    PROCEDURE ADD_R_TEACHER_MATTER(MATTER_ID_PARAMETER R_TEACHER_MATTER.MATTER_ID%TYPE,
        TEACHER_ID_PARAMETER R_TEACHER_MATTER.TEACHER_ID%TYPE,
        SEMESTER_ID_PARAMETER R_TEACHER_MATTER.SEMESTER_ID%TYPE)
    AS
    BEGIN
        INSERT INTO R_TEACHER_MATTER(TEACHER_ID, MATTER_ID, SEMESTER_ID) VALUES (TEACHER_ID_PARAMETER,MATTER_ID_PARAMETER,SEMESTER_ID_PARAMETER);
    END ADD_R_TEACHER_MATTER;


    PROCEDURE GET_TEACHERS_BY_MATTER(MATTER_ID_PARAMETER R_TEACHER_MATTER.MATTER_ID%TYPE)
    AS
        CURSOR_TEACHER Sys_Refcursor;
    BEGIN
        OPEN CURSOR_TEACHER FOR
        SELECT T.TEACHER_ID, T.FIRST_NAME, T.SECOND_NAME, T.FIRST_SURNAME, T.SECOND_SURNAME, T.IS_UPC_TEACHER, T.STATUS 
        FROM TEACHER T
        INNER JOIN R_TEACHER_MATTER RTM ON (T.TEACHER_ID = RTM.TEACHER_ID)
        WHERE RTM.MATTER_ID = MATTER_ID_PARAMETER AND RTM.STATUS = 1;
        DBMS_SQL.RETURN_RESULT(CURSOR_TEACHER);
    END GET_TEACHERS_BY_MATTER;
    
    PROCEDURE GET_MATTERS_BY_TEACHER(TEACHER_ID_PARAMETER R_TEACHER_MATTER.TEACHER_ID%TYPE)
    AS
        CURSOR_MATTER Sys_Refcursor;
    BEGIN
        OPEN CURSOR_MATTER FOR
        SELECT M.MATTER_ID, M.NAME, M.STATUS 
        FROM MATTER M
        INNER JOIN R_TEACHER_MATTER RTM ON (M.MATTER_ID = RTM.MATTER_ID)
        WHERE RTM.TEACHER_ID = TEACHER_ID_PARAMETER AND RTM.STATUS = 1;
        DBMS_SQL.RETURN_RESULT(CURSOR_MATTER);
    END GET_MATTERS_BY_TEACHER;

    PROCEDURE GET_TEACHERS_BY_MATTER_FILTER_BY_SEMESTER(MATTER_ID_PARAMETER R_TEACHER_MATTER.MATTER_ID%TYPE,
        SEMESTER_ID_PARAMETER R_TEACHER_MATTER.SEMESTER_ID%TYPE)
    AS
        CURSOR_TEACHER Sys_Refcursor;
    BEGIN
        OPEN CURSOR_TEACHER FOR
        SELECT T.TEACHER_ID, T.FIRST_NAME, T.SECOND_NAME, T.FIRST_SURNAME, T.SECOND_SURNAME, T.IS_UPC_TEACHER, T.STATUS 
        FROM TEACHER T
        INNER JOIN R_TEACHER_MATTER RTM ON (T.TEACHER_ID = RTM.TEACHER_ID)
        WHERE RTM.MATTER_ID = MATTER_ID_PARAMETER AND RTM.STATUS = 1 AND RTM.SEMESTER_ID = SEMESTER_ID_PARAMETER;
        DBMS_SQL.RETURN_RESULT(CURSOR_TEACHER);
    END GET_TEACHERS_BY_MATTER_FILTER_BY_SEMESTER;
    
    PROCEDURE GET_MATTERS_BY_TEACHER_FILTER_BY_SEMESTER(TEACHER_ID_PARAMETER R_TEACHER_MATTER.TEACHER_ID%TYPE,
        SEMESTER_ID_PARAMETER R_TEACHER_MATTER.SEMESTER_ID%TYPE)
    AS
        CURSOR_MATTER Sys_Refcursor;
    BEGIN
        OPEN CURSOR_MATTER FOR
        SELECT M.MATTER_ID, M.NAME, M.STATUS 
        FROM MATTER M
        INNER JOIN R_TEACHER_MATTER RTM ON (M.MATTER_ID = RTM.MATTER_ID)
        WHERE RTM.TEACHER_ID = TEACHER_ID_PARAMETER AND RTM.STATUS = 1 AND RTM.SEMESTER_ID = SEMESTER_ID_PARAMETER;
        DBMS_SQL.RETURN_RESULT(CURSOR_MATTER);
    END GET_MATTERS_BY_TEACHER_FILTER_BY_SEMESTER;
    
END PACK_R_TEACHER_MATTER;

--Score table

CREATE OR REPLACE PACKAGE PACK_SCORE AS
    PROCEDURE GET_SCORES_BY_SEMESTER(SEMESTER_ID_PARAMETER SCORE.SEMESTER_ID%TYPE);
    PROCEDURE GET_SCORES_BY_TEACHER(TEACHER_ID_PARAMETER SCORE.TEACHER_ID%TYPE);
    PROCEDURE GET_SCORES;
END PACK_SCORE;

CREATE OR REPLACE PACKAGE BODY PACK_SCORE AS
    PROCEDURE GET_SCORES
    AS
        CURSOR_SCORE SYS_REFCURSOR;
    BEGIN
        OPEN CURSOR_SCORE FOR
        SELECT * FROM SCORE;
        DBMS_SQL.RETURN_RESULT(CURSOR_SCORE);
    END GET_SCORES;
    
    PROCEDURE GET_SCORES_BY_TEACHER(TEACHER_ID_PARAMETER SCORE.TEACHER_ID%TYPE)
    AS
        CURSOR_SCORE SYS_REFCURSOR;
    BEGIN
        OPEN CURSOR_SCORE FOR
        SELECT * FROM SCORE
        WHERE TEACHER_ID = TEACHER_ID_PARAMETER;
        DBMS_SQL.RETURN_RESULT(CURSOR_SCORE);
    END GET_SCORES_BY_TEACHER;
    
    PROCEDURE GET_SCORES_BY_SEMESTER(SEMESTER_ID_PARAMETER SCORE.SEMESTER_ID%TYPE)
    AS
        CURSOR_SCORE SYS_REFCURSOR;
    BEGIN
        OPEN CURSOR_SCORE FOR
        SELECT * FROM SCORE
        WHERE SEMESTER_ID = SEMESTER_ID_PARAMETER;
        DBMS_SQL.RETURN_RESULT(CURSOR_SCORE);
    END GET_SCORES_BY_SEMESTER;
END PACK_SCORE;

--Semester_log table

CREATE OR REPLACE PACKAGE PACK_SEMESTER_LOG AS
    PROCEDURE GET_SEMESTER_LOG;
END PACK_SEMESTER_LOG;

CREATE OR REPLACE PACKAGE BODY PACK_SEMESTER_LOG AS
    PROCEDURE GET_SEMESTER_LOG
    AS
        CURSOR_SEMESTER_LOG SYS_REFCURSOR;
    BEGIN
        OPEN CURSOR_SEMESTER_LOG FOR
        SELECT * FROM SEMESTER_LOG;
        DBMS_SQL.RETURN_RESULT(CURSOR_SEMESTER_LOG);
    END GET_SEMESTER_LOG;
END PACK_SEMESTER_LOG;








