--Synonyms
CREATE PUBLIC SYNONYM PACK_CAREER FOR PACK_CAREER;
CREATE PUBLIC SYNONYM PACK_COMMON_USER FOR PACK_COMMON_USER;
CREATE PUBLIC SYNONYM PACK_FACULTY FOR PACK_FACULTY;
CREATE PUBLIC SYNONYM PACK_MATTER FOR PACK_MATTER;
CREATE PUBLIC SYNONYM PACK_R_CAREER_MATTER FOR PACK_R_CAREER_MATTER;
CREATE PUBLIC SYNONYM PACK_R_TEACHER_MATTER FOR PACK_R_TEACHER_MATTER;
CREATE PUBLIC SYNONYM PACK_REVIEW FOR PACK_REVIEW;
CREATE PUBLIC SYNONYM PACK_SCORE FOR PACK_SCORE;
CREATE PUBLIC SYNONYM PACK_SEMESTER_LOG FOR PACK_SEMESTER_LOG;
CREATE PUBLIC SYNONYM PACK_TEACHER FOR PACK_TEACHER;
--Triggers
--                                            -------------------------(1)---------------------
CREATE OR REPLACE TRIGGER VERIFIED_SCORES
    FOR INSERT OR UPDATE ON REVIEW
COMPOUND TRIGGER
    TYPE REVIEW_ONLY_SCORE IS RECORD
    (
        TEACHER_ID NUMBER,
        SEMESTER_ID NUMBER,
        KNOWLEDGE NUMBER,
        METHODOLOGY NUMBER,
        NATURALNESS NUMBER,
        ATTITUDE NUMBER,
        MOTIVATION_PRODUCE NUMBER,
        MATTER_GUIDELINES NUMBER,
        WEIGHTED_AVERAGE NUMBER,
        TOTAL_PERSONS NUMBER(10)
    );
    TYPE SUM_REVIEWS_BY_TEACHER_T IS TABLE OF REVIEW_ONLY_SCORE INDEX BY PLS_INTEGER;
    SUM_REVIEWS_BY_TEACHER SUM_REVIEWS_BY_TEACHER_T;
    
    NEW_SUM_REVIEWS_BY_TEACHER SUM_REVIEWS_BY_TEACHER_T;
    ---------------------------------------------------
    BEFORE STATEMENT IS
    BEGIN
        SELECT TEACHER_ID, SEMESTER_ID, SUM(KNOWLEDGE), SUM(METHODOLOGY), SUM(NATURALNESS), SUM(ATTITUDE), SUM(MOTIVATION_PRODUCE), SUM(MATTER_GUIDELINES), SUM(WEIGHTED_AVERAGE), COUNT(TEACHER_ID)
            BULK COLLECT INTO SUM_REVIEWS_BY_TEACHER
            FROM REVIEW
            WHERE STATUS = 1
            GROUP BY TEACHER_ID,SEMESTER_ID;
    END BEFORE STATEMENT;
    ---------------------------------------------------
    AFTER EACH ROW IS
        VALIDATOR NUMBER(1) := 0;
        INDEX_MAKESHIFT NUMBER(10):=0;
    BEGIN
        VALIDATOR := 0;
        IF SUM_REVIEWS_BY_TEACHER.COUNT() != 0 THEN
            FOR J IN 1..SUM_REVIEWS_BY_TEACHER.COUNT() LOOP
                IF SUM_REVIEWS_BY_TEACHER(J).TEACHER_ID = :NEW.TEACHER_ID AND SUM_REVIEWS_BY_TEACHER(J).SEMESTER_ID = :NEW.SEMESTER_ID THEN             
                    SUM_REVIEWS_BY_TEACHER(J).KNOWLEDGE := SUM_REVIEWS_BY_TEACHER(J).KNOWLEDGE + :NEW.KNOWLEDGE;
                    SUM_REVIEWS_BY_TEACHER(J).METHODOLOGY := SUM_REVIEWS_BY_TEACHER(J).METHODOLOGY + :NEW.METHODOLOGY;
                    SUM_REVIEWS_BY_TEACHER(J).NATURALNESS := SUM_REVIEWS_BY_TEACHER(J).NATURALNESS + :NEW.NATURALNESS;
                    SUM_REVIEWS_BY_TEACHER(J).ATTITUDE := SUM_REVIEWS_BY_TEACHER(J).ATTITUDE + :NEW.ATTITUDE;
                    SUM_REVIEWS_BY_TEACHER(J).MOTIVATION_PRODUCE := SUM_REVIEWS_BY_TEACHER(J).MOTIVATION_PRODUCE + :NEW.MOTIVATION_PRODUCE;
                    SUM_REVIEWS_BY_TEACHER(J).MATTER_GUIDELINES := SUM_REVIEWS_BY_TEACHER(J).MATTER_GUIDELINES + :NEW.MATTER_GUIDELINES;
                    SUM_REVIEWS_BY_TEACHER(J).WEIGHTED_AVERAGE := SUM_REVIEWS_BY_TEACHER(J).WEIGHTED_AVERAGE + :NEW.WEIGHTED_AVERAGE;
                    SUM_REVIEWS_BY_TEACHER(J).TOTAL_PERSONS := SUM_REVIEWS_BY_TEACHER(J).TOTAL_PERSONS + 1;
                    VALIDATOR :=1;
                END IF;
            END LOOP;
        END IF;
        IF NEW_SUM_REVIEWS_BY_TEACHER.COUNT() != 0 THEN
            FOR J IN 1..NEW_SUM_REVIEWS_BY_TEACHER.COUNT() LOOP
                IF NEW_SUM_REVIEWS_BY_TEACHER(J).TEACHER_ID = :NEW.TEACHER_ID AND NEW_SUM_REVIEWS_BY_TEACHER(J).SEMESTER_ID = :NEW.SEMESTER_ID THEN         
                    NEW_SUM_REVIEWS_BY_TEACHER(J).KNOWLEDGE := NEW_SUM_REVIEWS_BY_TEACHER(J).KNOWLEDGE + :NEW.KNOWLEDGE;
                    NEW_SUM_REVIEWS_BY_TEACHER(J).METHODOLOGY := NEW_SUM_REVIEWS_BY_TEACHER(J).METHODOLOGY + :NEW.METHODOLOGY;
                    NEW_SUM_REVIEWS_BY_TEACHER(J).NATURALNESS := NEW_SUM_REVIEWS_BY_TEACHER(J).NATURALNESS + :NEW.NATURALNESS;
                    NEW_SUM_REVIEWS_BY_TEACHER(J).ATTITUDE := NEW_SUM_REVIEWS_BY_TEACHER(J).ATTITUDE + :NEW.ATTITUDE;
                    NEW_SUM_REVIEWS_BY_TEACHER(J).MOTIVATION_PRODUCE := NEW_SUM_REVIEWS_BY_TEACHER(J).MOTIVATION_PRODUCE + :NEW.MOTIVATION_PRODUCE;
                    NEW_SUM_REVIEWS_BY_TEACHER(J).MATTER_GUIDELINES := NEW_SUM_REVIEWS_BY_TEACHER(J).MATTER_GUIDELINES + :NEW.MATTER_GUIDELINES;
                    NEW_SUM_REVIEWS_BY_TEACHER(J).WEIGHTED_AVERAGE := NEW_SUM_REVIEWS_BY_TEACHER(J).WEIGHTED_AVERAGE + :NEW.WEIGHTED_AVERAGE;
                    NEW_SUM_REVIEWS_BY_TEACHER(J).TOTAL_PERSONS := NEW_SUM_REVIEWS_BY_TEACHER(J).TOTAL_PERSONS + 1;
                    VALIDATOR :=1;
                END IF;
            END LOOP;
        END IF;
        
        IF VALIDATOR = 0 THEN
            INDEX_MAKESHIFT := NEW_SUM_REVIEWS_BY_TEACHER.COUNT()+1; 
            NEW_SUM_REVIEWS_BY_TEACHER(INDEX_MAKESHIFT).TEACHER_ID := :NEW.TEACHER_ID;
            NEW_SUM_REVIEWS_BY_TEACHER(INDEX_MAKESHIFT).SEMESTER_ID := :NEW.SEMESTER_ID;
            NEW_SUM_REVIEWS_BY_TEACHER(INDEX_MAKESHIFT).KNOWLEDGE := :NEW.KNOWLEDGE;
            NEW_SUM_REVIEWS_BY_TEACHER(INDEX_MAKESHIFT).METHODOLOGY := :NEW.METHODOLOGY;
            NEW_SUM_REVIEWS_BY_TEACHER(INDEX_MAKESHIFT).NATURALNESS := :NEW.NATURALNESS;
            NEW_SUM_REVIEWS_BY_TEACHER(INDEX_MAKESHIFT).ATTITUDE := :NEW.ATTITUDE;
            NEW_SUM_REVIEWS_BY_TEACHER(INDEX_MAKESHIFT).MOTIVATION_PRODUCE := :NEW.MOTIVATION_PRODUCE;
            NEW_SUM_REVIEWS_BY_TEACHER(INDEX_MAKESHIFT).MATTER_GUIDELINES := :NEW.MATTER_GUIDELINES;
            NEW_SUM_REVIEWS_BY_TEACHER(INDEX_MAKESHIFT).WEIGHTED_AVERAGE := :NEW.WEIGHTED_AVERAGE;
            NEW_SUM_REVIEWS_BY_TEACHER(INDEX_MAKESHIFT).TOTAL_PERSONS := 1;
        END IF;
    END AFTER EACH ROW;
        
    AFTER STATEMENT IS
        TOTAL_REVIEWS_VARIABLE NUMBER(10) := 0;
    BEGIN
        IF SUM_REVIEWS_BY_TEACHER.COUNT() != 0 THEN
            FOR I IN 1..SUM_REVIEWS_BY_TEACHER.COUNT() LOOP
                TOTAL_REVIEWS_VARIABLE := SUM_REVIEWS_BY_TEACHER(I).TOTAL_PERSONS;
                UPDATE SCORE S
                    SET 
                        S.KNOWLEDGE = (SUM_REVIEWS_BY_TEACHER(I).KNOWLEDGE)/TOTAL_REVIEWS_VARIABLE,
                        S.METHODOLOGY = (SUM_REVIEWS_BY_TEACHER(I).METHODOLOGY)/TOTAL_REVIEWS_VARIABLE,
                        S.NATURALNESS = (SUM_REVIEWS_BY_TEACHER(I).NATURALNESS)/TOTAL_REVIEWS_VARIABLE,
                        S.ATTITUDE = (SUM_REVIEWS_BY_TEACHER(I).ATTITUDE)/TOTAL_REVIEWS_VARIABLE,
                        S.MOTIVATION_PRODUCE = (SUM_REVIEWS_BY_TEACHER(I).MOTIVATION_PRODUCE)/TOTAL_REVIEWS_VARIABLE,
                        S.MATTER_GUIDELINES = (SUM_REVIEWS_BY_TEACHER(I).MATTER_GUIDELINES)/TOTAL_REVIEWS_VARIABLE,
                        S.FINAL_SCORE = (SUM_REVIEWS_BY_TEACHER(I).WEIGHTED_AVERAGE)/TOTAL_REVIEWS_VARIABLE,
                        S.TOTAL_REVIEWS = TOTAL_REVIEWS_VARIABLE
                    WHERE S.TEACHER_ID = SUM_REVIEWS_BY_TEACHER(I).TEACHER_ID AND S.SEMESTER_ID = SUM_REVIEWS_BY_TEACHER(I).SEMESTER_ID;
            END LOOP;
        END IF;

        IF NEW_SUM_REVIEWS_BY_TEACHER.COUNT() != 0 THEN
            FOR I IN 1..NEW_SUM_REVIEWS_BY_TEACHER.COUNT() LOOP
                TOTAL_REVIEWS_VARIABLE := NEW_SUM_REVIEWS_BY_TEACHER(I).TOTAL_PERSONS;
                INSERT INTO SCORE(TEACHER_ID, SEMESTER_ID, KNOWLEDGE, METHODOLOGY, NATURALNESS, ATTITUDE, MOTIVATION_PRODUCE, MATTER_GUIDELINES, FINAL_SCORE, TOTAL_REVIEWS)
                    VALUES
                        (
                        (NEW_SUM_REVIEWS_BY_TEACHER(I).TEACHER_ID)/TOTAL_REVIEWS_VARIABLE,
                        (NEW_SUM_REVIEWS_BY_TEACHER(I).SEMESTER_ID)/TOTAL_REVIEWS_VARIABLE,
                        (NEW_SUM_REVIEWS_BY_TEACHER(I).KNOWLEDGE)/TOTAL_REVIEWS_VARIABLE,
                        (NEW_SUM_REVIEWS_BY_TEACHER(I).METHODOLOGY)/TOTAL_REVIEWS_VARIABLE,
                        (NEW_SUM_REVIEWS_BY_TEACHER(I).NATURALNESS)/TOTAL_REVIEWS_VARIABLE,
                        (NEW_SUM_REVIEWS_BY_TEACHER(I).ATTITUDE)/TOTAL_REVIEWS_VARIABLE,
                        (NEW_SUM_REVIEWS_BY_TEACHER(I).MOTIVATION_PRODUCE)/TOTAL_REVIEWS_VARIABLE,
                        (NEW_SUM_REVIEWS_BY_TEACHER(I).MATTER_GUIDELINES)/TOTAL_REVIEWS_VARIABLE,
                        (NEW_SUM_REVIEWS_BY_TEACHER(I).WEIGHTED_AVERAGE)/TOTAL_REVIEWS_VARIABLE,
                        TOTAL_REVIEWS_VARIABLE
                        );
            END LOOP;
        END IF;
    END AFTER STATEMENT;
END VERIFIED_SCORES;
--                                           